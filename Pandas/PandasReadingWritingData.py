We will be seeing I/O APIs (a set of function) available with pandas library. These functions are divided into 2 categories ::

Readers ::            
read_csv                            
read_excel
read_hdf
read_sql
read_json
read_html
read_stata
read_clipboard
read_pickle
read_msgpack
read_gbq

Writers ::
to_csv
to_excel
to_hdf
to_sql
to_json
to_html
to_stata
to_clipboard to_pickle
to_msgpack (experimental) to_gbq (experimental)

>>> import os
>>> os.chdir('/Users/sankar.biswas/Desktop/AI:ML docs/Notebooks/InputFiles')

>>> csvFrame = pd.read_csv('input.txt')
>>> csvFrame
   white  red  blue  green animal
0      1    5     2      3    cat
1      2    7     8      5    dog
2      3    3     6      7  horse
3      2    2     8      3   duck
4      4    4     2      1  mouse

If you want to use separator for your input file ::

>>> csvFrame = pd.read_table('input.txt', sep = ',')
>>> csvFrame
   white  red  blue  green animal
0      1    5     2      3    cat
1      2    7     8      5    dog
2      3    3     6      7  horse
3      2    2     8      3   duck
4      4    4     2      1  mouse

# generally first line of the input file is considered as the header, but if you would like to not do that, you would have to 
# specify that, so by default column names will be specified

>>> csvFrame = pd.read_csv('input.txt', header= None)
>>> csvFrame
       0    1     2      3       4
0  white  red  blue  green  animal
1      1    5     2      3     cat
2      2    7     8      5     dog
3      3    3     6      7   horse
4      2    2     8      3    duck
5      4    4     2      1   mouse

# or you can give your own headers while importing the dataset (removing the header from the input file)
>>> csvFrame = pd.read_csv('input.txt', names = ['white','red','blue','green','animal'])
>>> csvFrame
   white  red  blue  green animal
0      1    5     2      3    cat
1      2    7     8      5    dog
2      3    3     6      7  horse
3      2    2     8      3   duck
4      4    4     2      1  mouse

# Hierarchical structure in index 
input data :: 
color,status,item1,item2,item3
black,up,3,4,6
black,down,2,6,7
white,up,5,5,5
white,down,3,3,2
white,left,1,2,1
red,up,2,2,2
red,down,1,1,4


>>> csvFrame1 = pd.read_csv('input2.txt', index_col = ['color', 'status'])
>>> csvFrame1
              item1  item2  item3
color status                     
black up          3      4      6
      down        2      6      7
white up          5      5      5
      down        3      3      2
      left        1      2      1
red   up          2      2      2
      down        1      1      4
      
# Using RegExp to Parse TXT Files : many a times you would end up having an input file the separator oh which is not well 
# defined, in such cases we can define a regex inside read_table to import the data.

Input file :: 
white red blue green 
1        5 2 3 
2 7     8 5 
3 3 6 7

in the above input file the separator is not well defined.

>>> frame5 = pd.read_table('input3.txt',sep='\s+', engine='python')
>>> frame5
   white  red  blue  green
0      1    5     2      3
1      2    7     8      5
2      3    3     6      7

# In this example, we would be extracting the numeric part from a TXT file, in which there is a sequence of characters with 
# numerical values and the literal characters are completely fused.

input :: 
000END123AAA122
001END124BBB321
002END125CCC333

>>> frame5 = pd.read_table('input4.txt',sep='\D+', header = None, engine='python')
>>> frame5
   0    1    2
0  0  123  122
1  1  124  321
2  2  125  333

# if you want to skip some of the lines from an input file while extracting
# If you want to exclude the first five lines, you have to write skiprows = 5, but if you want to rule out the fifth line, 
# you have to write skiprows = [5].

input :: 

This file has been generated by automatic system
white,red,blue,green,animal
12-Feb-2015: Counting of animals inside the house
1,5,2,3,cat
2,7,8,5,dog
13-Feb-2015: Counting of animals outside the house
3,3,6,7,horse
2,2,8,3,duck
4,4,2,1,mouse

>>> pd.read_table('input5.txt',sep=',',skiprows=[0,2,5])
   white  red  blue  green animal
0      1    5     2      3    cat
1      2    7     8      5    dog
2      3    3     6      7  horse
3      2    2     8      3   duck
4      4    4     2      1  mouse

# Thanks to the nrows and skiprows options, you can select the starting line n (n = SkipRows) and the lines to be read after 
# it (nrows = i).

>>> pd.read_csv('input.txt',skiprows=[2],nrows=3,header=None)
   0  1  2  3     4
0  1  5  2  3   cat
1  2  7  8  5   dog
2  2  2  8  3  duck
>>> 
>>> pd.read_csv('input.txt',header=None)
   0  1  2  3      4
0  1  5  2  3    cat
1  2  7  8  5    dog
2  3  3  6  7  horse
3  2  2  8  3   duck
4  4  4  2  1  mouse


